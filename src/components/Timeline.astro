---
import { getAllHistory } from "../apis/history";
import type { HistoryItem } from "../apis/history";

interface Props {
  items?: HistoryItem[];
}

// APIから取得（API側で年度順にソート済み）
const items = (await getAllHistory()).contents;
---

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  // 型定義
  interface TimelineElements {
    year: Element | null;
    content: Element | null;
    imageBg: Element | null;
    overlay: Element | null;
    themeHeader: Element | null;
    events: NodeListOf<Element>;
  }

  interface AnimationConfig {
    duration: {
      fast: number;
      normal: number;
      slow: number;
    };
    ease: {
      smooth: string;
      bounce: string;
    };
    stagger: {
      items: number;
      events: number;
      eventsOut: number;
    };
    colors: {
      eventText: string;
      eventTextHover: string;
    };
  }

  // アニメーション設定の定数
  // タイミングやイージング、色を一箇所で管理
  const ANIMATION_CONFIG: AnimationConfig = {
    duration: {
      fast: 0.2, // 素早いアニメーション（ホバー時の年度拡大など）
      normal: 0.3, // 標準的なアニメーション（ホバー時の基本動作）
      slow: 0.4, // ゆっくりとしたアニメーション（コンテンツ展開など）
    },
    ease: {
      smooth: "power2.out", // 滑らかな動き
      bounce: "back.out(1.7)", // 弾むような動き（登場アニメーション用）
    },
    stagger: {
      items: 0.15, // アイテム間の遅延時間
      events: 0.1, // イベントテキストの遅延時間
      eventsOut: 0.05, // ホバー終了時の遅延時間
    },
    colors: {
      eventText: "#303030", // イベントテキストの基本色
      eventTextHover: "white", // ホバー時のイベントテキスト色
    },
  };

  // 初期状態の設定
  // ページ読み込み時にタイムラインアイテムを非表示状態にする
  function setInitialStates() {
    // タイムラインアイテムが存在する場合のみ初期化
    const timelineItems = document.querySelectorAll(".timeline-item");
    if (timelineItems.length === 0) {
      return;
    }

    // 奇数番目のアイテム（左から登場）
    gsap.set(".timeline-item:nth-child(odd)", {
      opacity: 0,
      x: -100, // 左側から登場
      y: 0,
    });

    // 偶数番目のアイテム（右から登場）
    gsap.set(".timeline-item:nth-child(even)", {
      opacity: 0,
      x: 100, // 右側から登場
      y: 0,
    });

    // 背景画像の初期状態
    gsap.set(".timeline-image-bg", {
      opacity: 0.3, // 初期状態は薄く表示
      filter: "grayscale(100%)", // グレースケール
    });

    // オーバーレイの初期状態
    gsap.set(".timeline-image-overlay", {
      opacity: 0, // 初期状態は非表示
    });

    // イベントテキストの初期状態
    gsap.set(".timeline-events *", {
      opacity: 0.8,
      y: 5, // 少し下にずらして配置
      color: ANIMATION_CONFIG.colors.eventText,
      textShadow: "none",
    });
  }

  // スクロールアニメーション
  // ユーザーがタイムラインエリアまでスクロールした時にアイテムを順次表示
  function initScrollAnimation() {
    const timelineItems = document.querySelectorAll(".timeline-item");
    if (timelineItems.length === 0) {
      return;
    }

    gsap.to(".timeline-item", {
      opacity: 1,
      x: 0, // 元の位置に戻す
      duration: 0.8,
      stagger: ANIMATION_CONFIG.stagger.items, // アイテム間の遅延
      ease: ANIMATION_CONFIG.ease.bounce, // 弾むような動き
      scrollTrigger: {
        trigger: ".timeline", // トリガー要素
        start: "top 80%", // タイムラインの上端が画面の80%位置に来た時
        end: "bottom 20%", // タイムラインの下端が画面の20%位置に来た時
        toggleActions: "play none none reverse", // スクロール方向による動作
      },
    });
  }

  // ホバー時のアニメーション
  // タイムラインアイテムにマウスホバーした時の詳細表示アニメーション
  function createHoverAnimation(elements: TimelineElements) {
    const { year, content, imageBg, overlay, themeHeader, events } = elements;
    const tl = gsap.timeline(); // アニメーションのタイムラインを作成

    // 年度数字のフォントサイズ拡大（同時開始: 0秒）
    const yearNumber = year?.querySelector(".timeline-year-number");
    if (yearNumber) {
      tl.to(
        yearNumber,
        {
          fontSize: "1.65rem", // 控えめな拡大（テーマほど大きくない）
          duration: ANIMATION_CONFIG.duration.fast,
          ease: ANIMATION_CONFIG.ease.bounce,
        },
        0,
      );
    }

    // コンテンツエリアの高さ拡張（同時開始: 0秒）
    tl.to(
      content,
      {
        minHeight: "300px", // 高さを300pxに拡張
        duration: ANIMATION_CONFIG.duration.slow,
        ease: ANIMATION_CONFIG.ease.smooth,
      },
      0,
    )

      // 背景画像の表示（同時開始: 0秒）
      .to(
        imageBg,
        {
          opacity: 0.8, // 透明度を上げて表示
          filter: "grayscale(0%)", // グレースケールを解除
          duration: ANIMATION_CONFIG.duration.slow,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0,
      )

      // オーバーレイの表示（0.1秒後に開始）
      .to(
        overlay,
        {
          opacity: 1, // オーバーレイを表示
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0.1,
      )

      // テーマヘッダーのフォントサイズ拡大（0.1秒後に開始）
      .to(
        themeHeader,
        {
          fontSize: "1.7rem", // 1.5rem → 1.7remに拡大（文字の縦伸びを防ぐ）
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.bounce,
        },
        0.1,
      );

    // イベントテキストの表示（同時開始: 0秒）
    if (events.length > 0) {
      tl.to(
        events,
        {
          opacity: 1, // 完全に表示
          y: 0, // 元の位置に戻す
          color: ANIMATION_CONFIG.colors.eventTextHover, // ホバー時の文字色
          textShadow: "0 1px 2px rgba(0, 0, 0, 0.7)", // 影を追加
          duration: ANIMATION_CONFIG.duration.normal,
          stagger: ANIMATION_CONFIG.stagger.events, // テキスト間の遅延
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0,
      );
    }

    return tl;
  }

  // ホバー終了時のアニメーション
  // マウスがタイムラインアイテムから離れた時の元の状態への復帰アニメーション
  function createLeaveAnimation(elements: TimelineElements) {
    const { year, content, imageBg, overlay, themeHeader, events } = elements;
    const tl = gsap.timeline(); // アニメーションのタイムラインを作成

    // 年度数字のフォントサイズを元に戻す（同時開始: 0秒）
    const yearNumber = year?.querySelector(".timeline-year-number");
    if (yearNumber) {
      tl.to(
        yearNumber,
        {
          fontSize: "1.5rem", // 元のフォントサイズに戻す
          duration: ANIMATION_CONFIG.duration.fast,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0,
      );
    }

    // コンテンツエリアの高さを元に戻す（同時開始: 0秒）
    tl.to(
      content,
      {
        minHeight: "200px", // 元の高さに戻す
        duration: ANIMATION_CONFIG.duration.slow,
        ease: ANIMATION_CONFIG.ease.smooth,
      },
      0,
    )

      // 背景画像を元の状態に戻す（同時開始: 0秒）
      .to(
        imageBg,
        {
          opacity: 0.3, // 透明度を下げる
          filter: "grayscale(100%)", // グレースケールを適用
          duration: ANIMATION_CONFIG.duration.slow,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0,
      )

      // オーバーレイを非表示にする（同時開始: 0秒）
      .to(
        overlay,
        {
          opacity: 0, // オーバーレイを非表示
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0,
      )

      // テーマヘッダーのフォントサイズを元に戻す（同時開始: 0秒）
      .to(
        themeHeader,
        {
          fontSize: "1.5rem", // 元のサイズに戻す
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0,
      );

    // イベントテキストを元の状態に戻す（同時開始: 0秒）
    if (events.length > 0) {
      tl.to(
        events,
        {
          opacity: 0.8, // 少し透明に戻す
          y: 5, // 少し下にずらす
          color: ANIMATION_CONFIG.colors.eventText, // 元の色に戻す
          textShadow: "none", // 影を削除
          duration: ANIMATION_CONFIG.duration.fast,
          stagger: ANIMATION_CONFIG.stagger.eventsOut, // テキスト間の遅延
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0,
      );
    }

    return tl;
  }

  // モバイル判定
  function isMobile() {
    return window.innerWidth <= 768;
  }

  // 画面中央のタイムラインアイテムを取得
  function getCenterTimelineItem() {
    const items = document.querySelectorAll(".timeline-item");
    const viewportCenter = window.innerHeight / 2;
    let centerItem = null;
    let minDistance = Infinity;

    items.forEach((item) => {
      const rect = item.getBoundingClientRect();
      const itemCenter = rect.top + rect.height / 2;
      const distance = Math.abs(itemCenter - viewportCenter);

      if (distance < minDistance) {
        minDistance = distance;
        centerItem = item;
      }
    });

    return centerItem;
  }

  // ホバー状態の管理
  let hoveredItem: Element | null = null;

  // モバイル用スクロールアニメーション
  function setupMobileScrollAnimation() {
    if (!isMobile()) return;

    let currentCenterItem: Element | null = null;

    const handleScroll = () => {
      // ホバー中のアイテムがある場合はスクロールアニメーションを無効化
      if (hoveredItem) return;

      const centerItem = getCenterTimelineItem();

      if (centerItem !== currentCenterItem) {
        // 前のアイテムを閉じる
        if (currentCenterItem) {
          const elements = getItemElements(currentCenterItem);
          createLeaveAnimation(elements);
        }

        // 新しい中央アイテムを開く
        if (centerItem) {
          const elements = getItemElements(centerItem);
          createHoverAnimation(elements);
        }

        currentCenterItem = centerItem;
      }
    };

    // スクロールイベントの設定（throttle）
    let ticking = false;
    window.addEventListener("scroll", () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          handleScroll();
          ticking = false;
        });
        ticking = true;
      }
    });
  }

  // アイテムの要素を取得するヘルパー関数
  function getItemElements(item: Element): TimelineElements {
    return {
      year: item.querySelector(".timeline-year"),
      content: item.querySelector(".timeline-content"),
      imageBg: item.querySelector(".timeline-image-bg"),
      overlay: item.querySelector(".timeline-image-overlay"),
      themeHeader: item.querySelector(".timeline-theme-header"),
      events: item.querySelectorAll(".timeline-events *"), // すべての子要素を対象
    };
  }

  // アイテムを画面中央にスクロール
  function scrollToCenter(item: Element) {
    const rect = item.getBoundingClientRect();
    const itemCenter = rect.top + rect.height / 2;
    const viewportCenter = window.innerHeight / 2;
    const scrollOffset = window.pageYOffset + itemCenter - viewportCenter;

    window.scrollTo({
      top: scrollOffset,
      behavior: "smooth",
    });
  }

  // ホバーイベントの設定
  // 各タイムラインアイテムにマウスイベントを設定
  function setupHoverEvents() {
    const timelineItems = document.querySelectorAll(".timeline-item");
    if (timelineItems.length === 0) {
      return;
    }

    timelineItems.forEach((item) => {
      const elements = getItemElements(item);

      // マウスホバー時のイベント
      item.addEventListener("mouseenter", () => {
        hoveredItem = item;
        createHoverAnimation(elements);
      });

      // マウスが離れた時のイベント
      item.addEventListener("mouseleave", () => {
        hoveredItem = null;
        createLeaveAnimation(elements);
      });

      // クリック時のスクロール処理
      item.addEventListener("click", () => scrollToCenter(item));
    });
  }

  // 初期化処理
  // ページ読み込み完了後に実行される初期化処理
  document.addEventListener("DOMContentLoaded", () => {
    setInitialStates(); // 初期状態の設定
    initScrollAnimation(); // スクロールアニメーションの初期化
    setupHoverEvents(); // ホバーイベントの設定（デスクトップのみ）
    setupMobileScrollAnimation(); // モバイル用スクロールアニメーション
  });
</script>

<!-- タイムラインコンテナ -->
<div class="timeline">
  {
    items.length > 0 ? (
      items.map((item) => {
        const themeColor = `#${item.themeColorCode}`;
        const backgroundImage = `url(${item.thumbnail.url})`;

        return (
          <article
            class="timeline-item"
            data-year={item.year}
            style={`--item-theme-color: ${themeColor}`}
          >
            {/* 年度表示エリア */}
            <header class="timeline-year">
              <time
                class="timeline-year-number"
                datetime={item.year.toString()}
              >
                {item.year}
              </time>
            </header>

            {/* コンテンツエリア（テーマ、イベント、背景画像を含む） */}
            <div class="timeline-content">
              {/* 年度のテーマヘッダー */}
              <h3
                class="timeline-theme-header"
                style={`--theme-color: ${themeColor}`}
              >
                {item.theme}
              </h3>

              {/* 年度のイベントリスト（HTMLをそのまま表示） */}
              <div class="timeline-events" set:html={item.events} />

              {/* 背景画像 */}
              <div
                class="timeline-image-bg"
                style={`background-image: ${backgroundImage}`}
                role="img"
                aria-label={`${item.year}年の背景画像`}
              >
                {/* ホバー時のオーバーレイ */}
                <div class="timeline-image-overlay" />
              </div>
            </div>
          </article>
        );
      })
    ) : (
      <div class="timeline-empty">
        <p>タイムラインデータがありません。</p>
        <p>APIの設定を確認してください。</p>
      </div>
    )
  }
</div>

<style>
  /* CSS変数の定義 */
  :root {
    --timeline-item-height: 120px;
    --timeline-item-height-expanded: 300px;
    --timeline-year-width: 80px;
    --timeline-year-mobile-width: 60px;
    --timeline-content-height: 150px;
    --timeline-content-height-mobile: 100px;
    --timeline-border-radius: 8px;
    --timeline-shadow: 0 2px 8px rgb(0 0 0 / 10%);
    --timeline-overlay-bg: rgb(0 0 0 / 30%);
    --timeline-text-shadow: 0 1px 2px rgb(0 0 0 / 70%);
  }

  /* タイムラインコンテナ */
  .timeline {
    position: relative;
    margin: 0 auto;
  }

  /* 空の状態メッセージ */
  .timeline-empty {
    padding: 2rem;
    color: #666;
    text-align: center;
  }

  .timeline-empty p {
    margin-bottom: 0.5rem;
  }

  /* 各年度のタイムラインアイテム */
  .timeline-item {
    position: relative;
    z-index: 1; /* 基本レイヤー */
    display: flex;
    flex-direction: row; /* 横並びレイアウト */
    align-items: flex-start;
    background-color: var(
      --item-theme-color,
      transparent
    ); /* テーマカラーで背景色設定 */
  }

  /* 年度表示エリア */
  .timeline-year {
    position: relative;
    z-index: 5; /* 年度表示レイヤー */
    display: flex;
    flex-shrink: 0; /* 縮小を防ぐ */
    align-items: center;
    justify-content: center;
    width: var(--timeline-year-width); /* CSS変数を使用 */
    min-width: var(--timeline-year-width);
    max-width: var(--timeline-year-width);
    padding: 0.8rem 1rem 0.5rem;
    text-align: center;
  }

  /* 年度数字 */
  .timeline-year-number {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--ivory);
    transform: translateX(3px); /* 少し右にずらす */
  }

  /* テーマヘッダー */
  .timeline-theme-header {
    position: relative;
    z-index: 6; /* テーマヘッダーレイヤー */
    padding: 0.5rem 0;
    margin-bottom: 1rem;
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--theme-color); /* テーマカラーで文字色設定 */
    text-align: center;
    border-bottom: 2px solid var(--theme-color);
  }

  /* コンテンツエリア */
  .timeline-content {
    position: relative;
    flex: 1; /* 残りの幅を使用 */
    min-height: var(--timeline-item-height);
    padding: 1.5rem;
    overflow: hidden;
    background: white;
    box-shadow: var(--timeline-shadow); /* CSS変数を使用 */
  }

  /* 背景画像 */
  .timeline-image-bg {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 3; /* 背景画像レイヤー */
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover; /* 画像をコンテナに合わせる */

    /* opacity, filter はGSAPで制御 */
  }

  /* ホバー時のオーバーレイ */
  .timeline-image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 4; /* オーバーレイレイヤー */
    width: 100%;
    height: 100%;
    background: var(--timeline-overlay-bg); /* CSS変数を使用 */

    /* opacity はGSAPで制御 */
  }

  /* イベントテキスト */
  .timeline-events {
    position: relative;
    z-index: 7; /* イベントテキストレイヤー */
  }

  .timeline-events ul {
    padding-left: 0; /* 左パディングを削除 */
    margin: 0;
    list-style: none; /* リストマーカーを削除 */
  }

  .timeline-events * {
    margin-bottom: 0.5rem;
    font-size: 1.3rem;
    font-weight: 600;
    line-height: 1.6;
    list-style: none; /* リストマーカーを削除 */
  }

  .timeline-events *:last-child {
    margin-bottom: 0;
  }

  /* レスポンシブデザイン - モバイル対応 */
  @media (width <= 768px) {
    /* モバイル用アイテムレイアウト */
    .timeline .timeline-item {
      flex-direction: row;
      padding-left: 60px; /* 年度表示分のパディング */
    }

    /* モバイル用年度文字の色（グラデーション効果） */
    .timeline-year-number {
      color: transparent;
      background: linear-gradient(
        to right,
        white 50%,
        /* 左半分は白 */ var(--item-theme-color, #666) 50%
          /* 右半分はテーマカラー */
      );
      background-clip: text; /* テキストにグラデーション適用 */
    }

    /* モバイル用コンテンツの高さ固定 */
    .timeline-content {
      height: var(--timeline-content-height); /* CSS変数を使用 */
      min-height: var(--timeline-content-height);
    }

    /* モバイル用年度表示（絶対配置） */
    .timeline .timeline-year {
      position: absolute; /* 絶対配置で左上に固定 */
      top: 0;
      left: 0;
      z-index: 10; /* 最前面レイヤー */
      min-width: var(--timeline-year-mobile-width); /* CSS変数を使用 */
      margin: 0;
      overflow: hidden;
      border-radius: var(--timeline-border-radius); /* CSS変数を使用 */
    }

    /* モバイル用テーマヘッダー */
    .timeline-theme-header {
      margin-bottom: 0.8rem; /* マージン調整 */
      font-size: 1.2rem; /* フォントサイズ調整 */
    }

    /* モバイル用コンテンツエリア */
    .timeline .timeline-content {
      width: 100%;
      min-height: var(--timeline-content-height-mobile); /* CSS変数を使用 */
      margin: 0;
    }

    /* モバイル用背景画像の透明度調整 */
    .timeline-image-bg {
      opacity: 0.4; /* 少し濃く表示 */
    }
  }
</style>
