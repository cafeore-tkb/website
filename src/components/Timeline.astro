---
import type { TimelineItem } from "../utils/timeline";

interface Props {
  items: TimelineItem[];
}

const { items } = Astro.props;
---

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  // GSAPプラグインを登録
  gsap.registerPlugin(ScrollTrigger);

  // アニメーション設定
  const ANIMATION_CONFIG = {
    duration: {
      fast: 0.2,
      normal: 0.3,
      slow: 0.4,
    },
    ease: {
      smooth: "power2.out",
      bounce: "back.out(1.7)",
    },
    stagger: {
      items: 0.15,
      events: 0.1,
      eventsOut: 0.05,
    },
  };

  // 初期状態の設定
  function setInitialStates() {
    gsap.set(".timeline-item:nth-child(odd)", {
      opacity: 0,
      x: -100,
      y: 0,
    });

    gsap.set(".timeline-item:nth-child(even)", {
      opacity: 0,
      x: 100,
      y: 0,
    });

    gsap.set(".timeline-event", {
      opacity: 0.8,
      y: 5,
      color: "#666",
      textShadow: "none",
    });
  }

  // スクロールアニメーション
  function initScrollAnimation() {
    gsap.to(".timeline-item", {
      opacity: 1,
      x: 0,
      duration: 0.8,
      stagger: ANIMATION_CONFIG.stagger.items,
      ease: ANIMATION_CONFIG.ease.bounce,
      scrollTrigger: {
        trigger: ".timeline",
        start: "top 80%",
        end: "bottom 20%",
        toggleActions: "play none none reverse",
      },
    });
  }

  // ホバー時のアニメーション
  function createHoverAnimation(elements: {
    year: Element;
    content: Element;
    imageBg: Element;
    overlay: Element;
    themeHeader: Element;
    events: NodeListOf<Element>;
  }) {
    const { year, content, imageBg, overlay, themeHeader, events } = elements;
    const tl = gsap.timeline();

    tl.to(
      year,
      {
        scale: 1.1,
        duration: ANIMATION_CONFIG.duration.fast,
        ease: ANIMATION_CONFIG.ease.bounce,
      },
      0
    )

      .to(
        content,
        {
          minHeight: "300px",
          duration: ANIMATION_CONFIG.duration.slow,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      )

      .to(
        imageBg,
        {
          opacity: 0.8,
          filter: "grayscale(0%)",
          duration: ANIMATION_CONFIG.duration.slow,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      )

      .to(
        overlay,
        {
          opacity: 1,
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0.1
      )

      .to(
        themeHeader,
        {
          scale: 1.05,
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.bounce,
        },
        0.1
      )

      .to(
        events,
        {
          opacity: 1,
          y: 0,
          color: "white",
          textShadow: "0 1px 2px rgba(0, 0, 0, 0.7)",
          duration: ANIMATION_CONFIG.duration.normal,
          stagger: ANIMATION_CONFIG.stagger.events,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      );

    return tl;
  }

  // ホバー終了時のアニメーション
  function createLeaveAnimation(elements: {
    year: Element | null;
    content: Element | null;
    imageBg: Element | null;
    overlay: Element | null;
    themeHeader: Element | null;
    events: NodeListOf<Element>;
  }) {
    const { year, content, imageBg, overlay, themeHeader, events } = elements;
    const tl = gsap.timeline();

    tl.to(
      year,
      {
        scale: 1,
        duration: ANIMATION_CONFIG.duration.fast,
        ease: ANIMATION_CONFIG.ease.smooth,
      },
      0
    )

      .to(
        content,
        {
          minHeight: "200px",
          duration: ANIMATION_CONFIG.duration.slow,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      )

      .to(
        imageBg,
        {
          opacity: 0.3,
          filter: "grayscale(100%)",
          duration: ANIMATION_CONFIG.duration.slow,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      )

      .to(
        overlay,
        {
          opacity: 0,
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      )

      .to(
        themeHeader,
        {
          scale: 1,
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      )

      .to(
        events,
        {
          opacity: 0.8,
          y: 5,
          color: "#666",
          textShadow: "none",
          duration: ANIMATION_CONFIG.duration.fast,
          stagger: ANIMATION_CONFIG.stagger.eventsOut,
          ease: ANIMATION_CONFIG.ease.smooth,
        },
        0
      );

    return tl;
  }

  // ホバーイベントの設定
  function setupHoverEvents() {
    document.querySelectorAll(".timeline-item").forEach((item) => {
      const elements = {
        year: item.querySelector(".timeline-year"),
        content: item.querySelector(".timeline-content"),
        imageBg: item.querySelector(".timeline-image-bg"),
        overlay: item.querySelector(".timeline-image-overlay"),
        themeHeader: item.querySelector(".timeline-theme-header"),
        events: item.querySelectorAll(".timeline-event"),
      };

      item.addEventListener("mouseenter", () => {
        gsap.to(item, {
          scaleY: 1.05,
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        });
        // elementsの型を修正してnullを除外
        {
          createHoverAnimation(
            elements as {
              year: Element;
              content: Element;
              imageBg: Element;
              overlay: Element;
              themeHeader: Element;
              events: NodeListOf<Element>;
            }
          );
        }
      });

      item.addEventListener("mouseleave", () => {
        gsap.to(item, {
          scaleY: 1,
          duration: ANIMATION_CONFIG.duration.normal,
          ease: ANIMATION_CONFIG.ease.smooth,
        });
        createLeaveAnimation(elements);
      });
    });
  }

  // 初期化
  document.addEventListener("DOMContentLoaded", () => {
    setInitialStates();
    initScrollAnimation();
    setupHoverEvents();
  });
</script>

<div class="timeline">
  {
    items.map((item) => (
      <div
        class="timeline-item"
        data-year={item.year}
        style={item.themeColor ? `--item-theme-color: ${item.themeColor}` : ""}
      >
        <div class="timeline-year">
          <div class="timeline-year-number">{item.year}</div>
        </div>
        <div class="timeline-content">
          {item.theme && (
            <div
              class="timeline-theme-header"
              style={`--theme-color: ${item.themeColor || "#666"}`}
            >
              {item.theme}
            </div>
          )}
          {item.events.map((event) => (
            <div class="timeline-event">{event}</div>
          ))}
          {item.image && (
            <div
              class="timeline-image-bg"
              style={`background-image: url(${item.image.src})`}
            >
              <div class="timeline-image-overlay" />
            </div>
          )}
        </div>
      </div>
    ))
  }
</div>

<style>
  :root {
    /* Timeline Layout */
    --timeline-max-width: 800px;
    --timeline-spacing: 2rem;
    --timeline-year-size: 80px;
    --timeline-year-min-size: 60px;
    --timeline-content-min-height: 120px;
    --timeline-content-hover-height: 300px;
    
    /* Animation */
    --timeline-border-radius: 20px;
    --timeline-mobile-border-radius: 8px;
    
    /* Colors */
    --timeline-text-color: #666;
    --timeline-overlay-bg: rgb(0 0 0 / 30%);
  }

  .timeline {
    position: relative;
    max-width: var(--timeline-max-width);
    margin: 0 auto;
  }

  .timeline-item {
    position: relative;
    z-index: 1;
    display: flex;
    flex-direction: row;
    align-items: flex-start;
    background-color: var(--item-theme-color, transparent);
  }

  .timeline-year {
    position: relative;
    z-index: 5;
    display: flex;
    flex-shrink: 0;
    align-items: center;
    justify-content: center;
    width: var(--timeline-year-size);
    min-width: var(--timeline-year-size);
    max-width: var(--timeline-year-size);
    padding: 0.8rem 1rem 0.5rem;
    text-align: center;
  }

  .timeline-year-number {
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--ivory);
    transform: translateX(3px);
  }

  .timeline-theme-header {
    position: relative;
    z-index: 6;
    padding: 0.5rem 0;
    margin-bottom: 1rem;
    font-size: 1.5rem;
    font-weight: bold;
    color: var(--theme-color);
    text-align: center;
    border-bottom: 2px solid var(--theme-color);
  }

  .timeline-content {
    position: relative;
    flex: 1;
    min-height: var(--timeline-content-min-height);
    padding: 1.5rem;
    overflow: hidden;
    background: white;
    box-shadow: 0 2px 8px rgb(0 0 0 / 10%);
  }

  .timeline-image-bg {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 3;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center center;
    background-size: cover;
    opacity: 0.3;
    filter: grayscale(100%);
  }

  .timeline-image-overlay {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 4;
    width: 100%;
    height: 100%;
    background: var(--timeline-overlay-bg);
    opacity: 0;
  }

  .timeline-event {
    position: relative;
    z-index: 7;
    margin-bottom: 0.5rem;
    font-size: 1.3rem;
    font-weight: 600;
    line-height: 1.6;
    color: var(--timeline-text-color);
  }

  .timeline-event:last-child {
    margin-bottom: 0;
  }

  /* レスポンシブデザイン */
  @media (width <= 768px) {
    .timeline .timeline-item {
      flex-direction: row;
      padding-left: 60px;
    }

    /* モバイル用年度文字の色 */
    .timeline-year-number {
      color: transparent;
      background: linear-gradient(
        to right,
        white 50%,
        var(--item-theme-color, #666) 50%
      );
      background-clip: text;
    }

    /* モバイル用コンテンツの高さ固定 */
    .timeline-content {
      height: 150px;
      min-height: 150px;
    }

    .timeline .timeline-year {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 10;
      min-width: 60px;
      margin: 0;
      overflow: hidden;
      border-radius: 8px;
    }

    .timeline-theme-header {
      margin-bottom: 0.8rem;
      font-size: 1.2rem;
    }

    .timeline .timeline-content {
      width: 100%;
      min-height: 100px;
      margin: 0;
    }

    .timeline-image-bg {
      opacity: 0.4;
    }
  }
</style>
